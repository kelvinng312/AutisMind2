package com.autismindd.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.autismindd.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Avatar = new Property(3, int.class, "avatar", false, "AVATAR");
        public final static Property Pic = new Property(4, String.class, "pic", false, "PIC");
        public final static Property Key = new Property(5, long.class, "key", false, "KEY");
        public final static Property UserState = new Property(6, boolean.class, "userState", false, "USER_STATE");
        public final static Property Stars = new Property(7, int.class, "stars", false, "STARS");
        public final static Property FirstLayerTaskID = new Property(8, int.class, "firstLayerTaskID", false, "FIRST_LAYER_TASK_ID");
        public final static Property LastLevelID = new Property(9, int.class, "lastLevelID", false, "LAST_LEVEL_ID");
        public final static Property Point = new Property(10, int.class, "point", false, "POINT");
        public final static Property Active = new Property(11, boolean.class, "active", false, "ACTIVE");
        public final static Property Helper = new Property(12, int.class, "helper", false, "HELPER");
        public final static Property Music = new Property(13, int.class, "music", false, "MUSIC");
        public final static Property TaskPlayProgress = new Property(14, int.class, "taskPlayProgress", false, "TASK_PLAY_PROGRESS");
        public final static Property SoundEffect = new Property(15, int.class, "soundEffect", false, "SOUND_EFFECT");
        public final static Property CreatedAt = new Property(16, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(17, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"PASSWORD\" TEXT NOT NULL ," + // 2: password
                "\"AVATAR\" INTEGER NOT NULL ," + // 3: avatar
                "\"PIC\" TEXT NOT NULL ," + // 4: pic
                "\"KEY\" INTEGER NOT NULL ," + // 5: key
                "\"USER_STATE\" INTEGER NOT NULL ," + // 6: userState
                "\"STARS\" INTEGER NOT NULL ," + // 7: stars
                "\"FIRST_LAYER_TASK_ID\" INTEGER NOT NULL ," + // 8: firstLayerTaskID
                "\"LAST_LEVEL_ID\" INTEGER NOT NULL ," + // 9: lastLevelID
                "\"POINT\" INTEGER NOT NULL ," + // 10: point
                "\"ACTIVE\" INTEGER NOT NULL ," + // 11: active
                "\"HELPER\" INTEGER NOT NULL ," + // 12: helper
                "\"MUSIC\" INTEGER NOT NULL ," + // 13: music
                "\"TASK_PLAY_PROGRESS\" INTEGER NOT NULL ," + // 14: taskPlayProgress
                "\"SOUND_EFFECT\" INTEGER NOT NULL ," + // 15: soundEffect
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 16: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 17: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getPassword());
        stmt.bindLong(4, entity.getAvatar());
        stmt.bindString(5, entity.getPic());
        stmt.bindLong(6, entity.getKey());
        stmt.bindLong(7, entity.getUserState() ? 1L: 0L);
        stmt.bindLong(8, entity.getStars());
        stmt.bindLong(9, entity.getFirstLayerTaskID());
        stmt.bindLong(10, entity.getLastLevelID());
        stmt.bindLong(11, entity.getPoint());
        stmt.bindLong(12, entity.getActive() ? 1L: 0L);
        stmt.bindLong(13, entity.getHelper());
        stmt.bindLong(14, entity.getMusic());
        stmt.bindLong(15, entity.getTaskPlayProgress());
        stmt.bindLong(16, entity.getSoundEffect());
        stmt.bindLong(17, entity.getCreatedAt().getTime());
        stmt.bindLong(18, entity.getUpdatedAt().getTime());
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // password
            cursor.getInt(offset + 3), // avatar
            cursor.getString(offset + 4), // pic
            cursor.getLong(offset + 5), // key
            cursor.getShort(offset + 6) != 0, // userState
            cursor.getInt(offset + 7), // stars
            cursor.getInt(offset + 8), // firstLayerTaskID
            cursor.getInt(offset + 9), // lastLevelID
            cursor.getInt(offset + 10), // point
            cursor.getShort(offset + 11) != 0, // active
            cursor.getInt(offset + 12), // helper
            cursor.getInt(offset + 13), // music
            cursor.getInt(offset + 14), // taskPlayProgress
            cursor.getInt(offset + 15), // soundEffect
            new java.util.Date(cursor.getLong(offset + 16)), // createdAt
            new java.util.Date(cursor.getLong(offset + 17)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPassword(cursor.getString(offset + 2));
        entity.setAvatar(cursor.getInt(offset + 3));
        entity.setPic(cursor.getString(offset + 4));
        entity.setKey(cursor.getLong(offset + 5));
        entity.setUserState(cursor.getShort(offset + 6) != 0);
        entity.setStars(cursor.getInt(offset + 7));
        entity.setFirstLayerTaskID(cursor.getInt(offset + 8));
        entity.setLastLevelID(cursor.getInt(offset + 9));
        entity.setPoint(cursor.getInt(offset + 10));
        entity.setActive(cursor.getShort(offset + 11) != 0);
        entity.setHelper(cursor.getInt(offset + 12));
        entity.setMusic(cursor.getInt(offset + 13));
        entity.setTaskPlayProgress(cursor.getInt(offset + 14));
        entity.setSoundEffect(cursor.getInt(offset + 15));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 16)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
