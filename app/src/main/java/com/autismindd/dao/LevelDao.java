package com.autismindd.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.autismindd.dao.Level;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LEVEL".
*/
public class LevelDao extends AbstractDao<Level, Long> {

    public static final String TABLENAME = "LEVEL";

    /**
     * Properties of entity Level.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, Long.class, "key", false, "KEY");
        public final static Property LevelNumber = new Property(2, Integer.class, "levelNumber", false, "LEVEL_NUMBER");
        public final static Property ErrorCount = new Property(3, Integer.class, "errorCount", false, "ERROR_COUNT");
        public final static Property Efficient = new Property(4, Integer.class, "efficient", false, "EFFICIENT");
        public final static Property CreatedAt = new Property(5, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(6, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property UserId = new Property(7, long.class, "userId", false, "USER_ID");
        public final static Property TaskPackId = new Property(8, long.class, "taskPackId", false, "TASK_PACK_ID");
        public final static Property LastTaskId = new Property(9, long.class, "lastTaskId", false, "LAST_TASK_ID");
    };

    private Query<Level> user_LevelListQuery;
    private Query<Level> taskPack_LevelListQuery;
    private Query<Level> task_LevelListQuery;

    public LevelDao(DaoConfig config) {
        super(config);
    }
    
    public LevelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LEVEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY\" INTEGER," + // 1: key
                "\"LEVEL_NUMBER\" INTEGER," + // 2: levelNumber
                "\"ERROR_COUNT\" INTEGER," + // 3: errorCount
                "\"EFFICIENT\" INTEGER," + // 4: efficient
                "\"CREATED_AT\" INTEGER," + // 5: createdAt
                "\"UPDATED_AT\" INTEGER," + // 6: updatedAt
                "\"USER_ID\" INTEGER NOT NULL ," + // 7: userId
                "\"TASK_PACK_ID\" INTEGER NOT NULL ," + // 8: taskPackId
                "\"LAST_TASK_ID\" INTEGER NOT NULL );"); // 9: lastTaskId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LEVEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Level entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long key = entity.getKey();
        if (key != null) {
            stmt.bindLong(2, key);
        }
 
        Integer levelNumber = entity.getLevelNumber();
        if (levelNumber != null) {
            stmt.bindLong(3, levelNumber);
        }
 
        Integer errorCount = entity.getErrorCount();
        if (errorCount != null) {
            stmt.bindLong(4, errorCount);
        }
 
        Integer efficient = entity.getEfficient();
        if (efficient != null) {
            stmt.bindLong(5, efficient);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(6, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(7, updatedAt.getTime());
        }
        stmt.bindLong(8, entity.getUserId());
        stmt.bindLong(9, entity.getTaskPackId());
        stmt.bindLong(10, entity.getLastTaskId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Level readEntity(Cursor cursor, int offset) {
        Level entity = new Level( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // levelNumber
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // errorCount
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // efficient
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // createdAt
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // updatedAt
            cursor.getLong(offset + 7), // userId
            cursor.getLong(offset + 8), // taskPackId
            cursor.getLong(offset + 9) // lastTaskId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Level entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLevelNumber(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setErrorCount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setEfficient(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCreatedAt(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdatedAt(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUserId(cursor.getLong(offset + 7));
        entity.setTaskPackId(cursor.getLong(offset + 8));
        entity.setLastTaskId(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Level entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Level entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "levelList" to-many relationship of User. */
    public List<Level> _queryUser_LevelList(long userId) {
        synchronized (this) {
            if (user_LevelListQuery == null) {
                QueryBuilder<Level> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_LevelListQuery = queryBuilder.build();
            }
        }
        Query<Level> query = user_LevelListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "levelList" to-many relationship of TaskPack. */
    public List<Level> _queryTaskPack_LevelList(long taskPackId) {
        synchronized (this) {
            if (taskPack_LevelListQuery == null) {
                QueryBuilder<Level> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskPackId.eq(null));
                taskPack_LevelListQuery = queryBuilder.build();
            }
        }
        Query<Level> query = taskPack_LevelListQuery.forCurrentThread();
        query.setParameter(0, taskPackId);
        return query.list();
    }

    /** Internal query to resolve the "levelList" to-many relationship of Task. */
    public List<Level> _queryTask_LevelList(long lastTaskId) {
        synchronized (this) {
            if (task_LevelListQuery == null) {
                QueryBuilder<Level> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LastTaskId.eq(null));
                task_LevelListQuery = queryBuilder.build();
            }
        }
        Query<Level> query = task_LevelListQuery.forCurrentThread();
        query.setParameter(0, lastTaskId);
        return query.list();
    }

}
