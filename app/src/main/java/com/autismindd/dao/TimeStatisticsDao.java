package com.autismindd.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.autismindd.dao.TimeStatistics;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIME_STATISTICS".
*/
public class TimeStatisticsDao extends AbstractDao<TimeStatistics, Long> {

    public static final String TABLENAME = "TIME_STATISTICS";

    /**
     * Properties of entity TimeStatistics.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserKey = new Property(1, long.class, "userKey", false, "USER_KEY");
        public final static Property FirstLayerTaskId = new Property(2, int.class, "firstLayerTaskId", false, "FIRST_LAYER_TASK_ID");
        public final static Property Level = new Property(3, int.class, "level", false, "LEVEL");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
    };


    public TimeStatisticsDao(DaoConfig config) {
        super(config);
    }
    
    public TimeStatisticsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIME_STATISTICS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_KEY\" INTEGER NOT NULL ," + // 1: userKey
                "\"FIRST_LAYER_TASK_ID\" INTEGER NOT NULL ," + // 2: firstLayerTaskId
                "\"LEVEL\" INTEGER NOT NULL ," + // 3: level
                "\"TIME\" INTEGER NOT NULL );"); // 4: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIME_STATISTICS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TimeStatistics entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserKey());
        stmt.bindLong(3, entity.getFirstLayerTaskId());
        stmt.bindLong(4, entity.getLevel());
        stmt.bindLong(5, entity.getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TimeStatistics readEntity(Cursor cursor, int offset) {
        TimeStatistics entity = new TimeStatistics( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userKey
            cursor.getInt(offset + 2), // firstLayerTaskId
            cursor.getInt(offset + 3), // level
            cursor.getLong(offset + 4) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TimeStatistics entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserKey(cursor.getLong(offset + 1));
        entity.setFirstLayerTaskId(cursor.getInt(offset + 2));
        entity.setLevel(cursor.getInt(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TimeStatistics entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TimeStatistics entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
