package com.autismindd.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.autismindd.dao.GiftTbl;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GIFT_TBL".
*/
public class GiftTblDao extends AbstractDao<GiftTbl, Long> {

    public static final String TABLENAME = "GIFT_TBL";

    /**
     * Properties of entity GiftTbl.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property UserKey = new Property(2, long.class, "userKey", false, "USER_KEY");
        public final static Property AppearPoint = new Property(3, int.class, "AppearPoint", false, "APPEAR_POINT");
        public final static Property AppearCount = new Property(4, int.class, "AppearCount", false, "APPEAR_COUNT");
    };


    public GiftTblDao(DaoConfig config) {
        super(config);
    }
    
    public GiftTblDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GIFT_TBL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"USER_KEY\" INTEGER NOT NULL ," + // 2: userKey
                "\"APPEAR_POINT\" INTEGER NOT NULL ," + // 3: AppearPoint
                "\"APPEAR_COUNT\" INTEGER NOT NULL );"); // 4: AppearCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GIFT_TBL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GiftTbl entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getUserKey());
        stmt.bindLong(4, entity.getAppearPoint());
        stmt.bindLong(5, entity.getAppearCount());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GiftTbl readEntity(Cursor cursor, int offset) {
        GiftTbl entity = new GiftTbl( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getLong(offset + 2), // userKey
            cursor.getInt(offset + 3), // AppearPoint
            cursor.getInt(offset + 4) // AppearCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GiftTbl entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setUserKey(cursor.getLong(offset + 2));
        entity.setAppearPoint(cursor.getInt(offset + 3));
        entity.setAppearCount(cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GiftTbl entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GiftTbl entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
