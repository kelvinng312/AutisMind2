package com.autismindd.dao;

import java.util.List;
import com.autismindd.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TASK_PACK".
 */
public class TaskPack {

    private Long id;
    private String name;
    private int level;
    private int firstLayerTaskID;
    private int touchAnimation;
    private int itemOfAnimation;
    private java.util.Date createdAt;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaskPackDao myDao;

    private List<Level> levelList;

    public TaskPack() {
    }

    public TaskPack(Long id) {
        this.id = id;
    }

    public TaskPack(Long id, String name, int level, int firstLayerTaskID, int touchAnimation, int itemOfAnimation, java.util.Date createdAt) {
        this.id = id;
        this.name = name;
        this.level = level;
        this.firstLayerTaskID = firstLayerTaskID;
        this.touchAnimation = touchAnimation;
        this.itemOfAnimation = itemOfAnimation;
        this.createdAt = createdAt;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskPackDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
    }

    public int getFirstLayerTaskID() {
        return firstLayerTaskID;
    }

    public void setFirstLayerTaskID(int firstLayerTaskID) {
        this.firstLayerTaskID = firstLayerTaskID;
    }

    public int getTouchAnimation() {
        return touchAnimation;
    }

    public void setTouchAnimation(int touchAnimation) {
        this.touchAnimation = touchAnimation;
    }

    public int getItemOfAnimation() {
        return itemOfAnimation;
    }

    public void setItemOfAnimation(int itemOfAnimation) {
        this.itemOfAnimation = itemOfAnimation;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Level> getLevelList() {
        if (levelList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LevelDao targetDao = daoSession.getLevelDao();
            List<Level> levelListNew = targetDao._queryTaskPack_LevelList(id);
            synchronized (this) {
                if(levelList == null) {
                    levelList = levelListNew;
                }
            }
        }
        return levelList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLevelList() {
        levelList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
