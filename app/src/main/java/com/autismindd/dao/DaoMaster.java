package com.autismindd.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.autismindd.dao.UserDao;
import com.autismindd.dao.TaskPackDao;
import com.autismindd.dao.TaskDao;
import com.autismindd.dao.ItemDao;
import com.autismindd.dao.ResultDao;
import com.autismindd.dao.FirstLayerDao;
import com.autismindd.dao.LevelDao;
import com.autismindd.dao.ErrorUserLogDao;
import com.autismindd.dao.StarDao;
import com.autismindd.dao.FirstLayerTaskImageDao;
import com.autismindd.dao.TimeStatisticsDao;
import com.autismindd.dao.GiftTblDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 2;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        UserDao.createTable(db, ifNotExists);
        TaskPackDao.createTable(db, ifNotExists);
        TaskDao.createTable(db, ifNotExists);
        ItemDao.createTable(db, ifNotExists);
        ResultDao.createTable(db, ifNotExists);
        FirstLayerDao.createTable(db, ifNotExists);
        LevelDao.createTable(db, ifNotExists);
        ErrorUserLogDao.createTable(db, ifNotExists);
        StarDao.createTable(db, ifNotExists);
        FirstLayerTaskImageDao.createTable(db, ifNotExists);
        TimeStatisticsDao.createTable(db, ifNotExists);
        GiftTblDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        UserDao.dropTable(db, ifExists);
        TaskPackDao.dropTable(db, ifExists);
        TaskDao.dropTable(db, ifExists);
        ItemDao.dropTable(db, ifExists);
        ResultDao.dropTable(db, ifExists);
        FirstLayerDao.dropTable(db, ifExists);
        LevelDao.dropTable(db, ifExists);
        ErrorUserLogDao.dropTable(db, ifExists);
        StarDao.dropTable(db, ifExists);
        FirstLayerTaskImageDao.dropTable(db, ifExists);
        TimeStatisticsDao.dropTable(db, ifExists);
        GiftTblDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            if(oldVersion == 1 && newVersion == 2){
              boolean ifNotExists = false;
              GiftTblDao.createTable(db, ifNotExists);
          }else {
                dropAllTables(db, true);
                onCreate(db);
            }

        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UserDao.class);
        registerDaoClass(TaskPackDao.class);
        registerDaoClass(TaskDao.class);
        registerDaoClass(ItemDao.class);
        registerDaoClass(ResultDao.class);
        registerDaoClass(FirstLayerDao.class);
        registerDaoClass(LevelDao.class);
        registerDaoClass(ErrorUserLogDao.class);
        registerDaoClass(StarDao.class);
        registerDaoClass(FirstLayerTaskImageDao.class);
        registerDaoClass(TimeStatisticsDao.class);
        registerDaoClass(GiftTblDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
